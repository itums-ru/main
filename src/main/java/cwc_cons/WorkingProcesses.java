package cwc_cons;

import java.util.Date;

public class WorkingProcesses {
   String hostName;           //Содержит имя или IP-адрес компьютера, на котором должен быть запущен рабочий процесс.
   int mainPort;              //Содержит номер основного IP-порта рабочего процесса
   boolean enable;            //хз что это за поле, при выводе в ps оно есть, а в документации нет
   int running;               //Состояние рабочего процесса.0 – процесс неактивен (либо не загружен в память, либо не может выполнять клиентские запросы); 1 – процесс активен (работает).
   int connections;           //Количество соединений рабочего процесса с пользовательскими приложениями.
   Date startedAt;            //Содержит момент запуска рабочего процесса. Если процесс не запущен, то содержит нулевую дату.
   double avgCallTime;        //Показывает среднее время обслуживания рабочим процессом одного клиентского обращения
   double avgServerCallTime;  //Показывает среднее время, затрачиваемое самим рабочим процессом на выполнение одного клиентского обращения.
   double avgDBCallTime;      //Показывает среднее время, затрачиваемое рабочим процессом на обращения к серверу баз данных при выполнении одного клиентского обращения.
   double avgBackCallTime;    //хз что это за поле, при выводе в ps оно есть, а в документации нет
   double avgLockCallTime;    //Показывает среднее время обращения к менеджеру блокировок.
   int selectionSize;         //Количество вызовов, по которым посчитана статистика.
   double avgThreads;         //Показывает среднее количество клиентских потоков, исполняемых рабочим процессом кластера.
   int capacity;              //Относительная производительность процесса.
   int memorySize;            //Содержит объем виртуальной памяти, занимаемой рабочим процессом, в килобайтах.
   int memoryExcessTime;       //Содержит время, в течение которого объем виртуальной памяти рабочего процесса превышает критическое значение, установленное для кластера, в секундах.
   double availablePerfomance;//Средняя за последние 5 минут доступная производительность. Определяется по времени реакции рабочего процесса на эталонный запрос.
   String PID;                //Идентификатор активного рабочего процесса в терминах операционной системы.
   int use;                   /*Определяет использование рабочего процесса кластером. Устанавливается администратором. Возможные значения:
                               0 – не использовать, процесс не должен быть запущен;
                               1 – использовать, процесс должен быть запущен;
                               2 – использовать как резервный, процесс должен быть запущен только при невозможности запуска процесса со значением 1 этого свойства.*/
   boolean isEnable;          /*Устанавливается кластером при необходимости запустить или остановить рабочий процесс.
                               Истина - процесс должен быть запущен и будет запущен при возможности.
                               Ложь - процесс должен быть остановлен и будет остановлен после отсоединения всех пользователей или после истечения времени*/
    String license;           //Содержит информацию о серверной лицензии, используемой рабочим процессом. ТУТ ДОЛЖЕН БЫТЬ ТИП ЛИЦЕНЦИИ ВМЕСТО STRING

}
